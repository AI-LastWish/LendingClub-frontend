export const metadata = {
  title: "Grade Defaults Analysis",
  description: "Identify which loan grade is most frequently associated with defaults.",
};

async function fetchGradeDefaults() {
  const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/data_analysis/grade-defaults`;

  try {
    const response = await fetch(apiUrl, { cache: "no-store" }); // Ensure fresh data for each request
    if (!response.ok) {
      throw new Error("Failed to fetch grade defaults data.");
    }

    return response.json();
  } catch (err: unknown) {
    const errorMessage =
      err instanceof Error ? err.message : "An unexpected error occurred.";
    console.error("Error fetching grade defaults data:", errorMessage);
    throw new Error(errorMessage);
  }
}

// Force dynamic rendering
export const dynamic = 'force-dynamic';

export default async function GradeDefaultsPage() {
  let imageData: string | null = null;
  let tableData: Record<string, number> | null = null;
  let summary: string | null = null;
  let error: string | null = null;

  try {
    const data = await fetchGradeDefaults();
    imageData = data.image; // Base64 image data from backend
    tableData = data.table; // Table of grade-default counts
    summary = data.summary; // Summary generated by ChatGPT
  } catch (err: unknown) {
    error =
      err instanceof Error ? err.message : "An unexpected error occurred.";
  }

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900 flex flex-col items-center p-8 sm:p-20">
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-bold">Grade Defaults Analysis</h1>
        <p className="text-gray-600">
          Identify which loan grade is most frequently associated with defaults.
        </p>
      </header>

      <main className="flex flex-col items-center w-full max-w-4xl">
        {error ? (
          <p className="text-red-600 text-lg">{error}</p>
        ) : (
          <>
            {/* Chart Section */}
            {imageData && (
              <div className="mb-8">
                <img
                  src={imageData}
                  alt="Grade Defaults Chart"
                  className="max-w-full h-auto border rounded-lg shadow-md"
                />
              </div>
            )}

            {/* Summary Section */}
            {summary && (
              <div className="mb-8 p-4 bg-blue-50 border border-blue-200 rounded-lg shadow-md">
                <h2 className="text-xl font-semibold mb-2">Summary</h2>
                <p className="text-gray-700">{summary}</p>
              </div>
            )}

            {/* Table Section */}
            {tableData && (
              <div className="w-full">
                <h2 className="text-xl font-semibold mb-4">Default Counts by Grade</h2>
                <table className="w-full table-auto border-collapse border border-gray-300">
                  <thead>
                    <tr className="bg-gray-200">
                      <th className="border border-gray-300 px-4 py-2">Grade</th>
                      <th className="border border-gray-300 px-4 py-2">Default Count</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(tableData).map(([grade, count]) => (
                      <tr key={grade} className="text-center">
                        <td className="border border-gray-300 px-4 py-2">{grade}</td>
                        <td className="border border-gray-300 px-4 py-2">{count}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}
      </main>
    </div>
  );
}
